RTYPE -> @
; @
RTYPE -> DOUBLE
DOUBLE
RTYPE -> FLOAT_NUM
FLOAT_NUM
RTYPE -> ID
ID
RTYPE -> INTEGER
INTEGER
TYPE -> DOUBLE
DOUBLE
TYPE -> FLOAT
FLOAT
TYPE -> INT
INT
arithmetic -> operand arithmetic1
FLOAT_NUM ID INTEGER
arithmetic1 -> @
) ; @
arithmetic1 -> op operand
* + - / < >
assign -> ID = assign1
ID
assign1 -> arithmetic
FLOAT_NUM ID INTEGER
function -> ret ID ( ) { states }
DOUBLE FLOAT INT VOID
functions -> function functions1
DOUBLE FLOAT INT VOID
functions1 -> @
$ @
functions1 -> functions
DOUBLE FLOAT INT VOID
init -> TYPE ID init1
DOUBLE FLOAT INT
init1 -> = init2
=
init1 -> @
; @
init2 -> arithmetic
FLOAT_NUM ID INTEGER
op -> *
*
op -> +
+
op -> -
-
op -> /
/
op -> <
<
op -> >
>
operand -> FLOAT_NUM
FLOAT_NUM
operand -> ID
ID
operand -> INTEGER
INTEGER
ret -> DOUBLE
DOUBLE
ret -> FLOAT
FLOAT
ret -> INT
INT
ret -> VOID
VOID
state -> IF ( arithmetic ) { states } ELSE { states }
IF
state -> RETURN RTYPE ;
RETURN
state -> assign ;
ID
state -> init ;
DOUBLE FLOAT INT
state -> while
WHILE
states -> state states1
DOUBLE FLOAT ID IF INT RETURN WHILE
states1 -> @
@ }
states1 -> states
DOUBLE FLOAT ID IF INT RETURN WHILE
while -> WHILE ( arithmetic ) { states }
WHILE
